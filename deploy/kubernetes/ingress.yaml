apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sentio-rag-ingress
  namespace: sentio-rag
  labels:
    app.kubernetes.io/name: sentio-rag
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://your-domain.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # Request size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Cert-manager for SSL (if using)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # WAF/ModSecurity (optional)
    nginx.ingress.kubernetes.io/modsecurity-transaction-id: "$request_id"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyAccess On
      SecRule REQUEST_HEADERS:Content-Type "^application/json" \
        "id:'200001',phase:1,allow,msg:'Allow JSON content'"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.your-domain.com  # Replace with your domain
    secretName: sentio-rag-tls
  rules:
  - host: api.your-domain.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sentio-rag-service
            port:
              number: 80

---
# Internal ingress for metrics (restrict access)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sentio-rag-metrics-ingress
  namespace: sentio-rag
  labels:
    app.kubernetes.io/name: sentio-rag
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: metrics-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Restrict access to internal networks only
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    # Basic auth for metrics endpoint
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: sentio-rag-metrics-auth
    nginx.ingress.kubernetes.io/auth-realm: "Metrics Access"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - metrics.your-domain.com  # Replace with your domain
    secretName: sentio-rag-metrics-tls
  rules:
  - host: metrics.your-domain.com  # Replace with your domain
    http:
      paths:
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: sentio-rag-service
            port:
              number: 9090